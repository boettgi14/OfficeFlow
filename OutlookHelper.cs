using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Office.Interop.Outlook;
using Microsoft.VisualBasic;

namespace OfficeFlow
{
    class OutlookHelper
    {
        /// <summary>
        /// Represents the watermark text used to indicate content generated by OfficeFlow.
        /// </summary>
        /// <remarks>This watermark is a static, read-only string that can be used to identify or label
        /// content as being automatically generated by the OfficeFlow system.</remarks>
        private static readonly string _watermark = "--- Generated by OfficeFlow ---";

        /// <summary>
        /// Exports a task to Microsoft Outlook as a new task item.
        /// </summary>
        /// <remarks>This method creates a new task item in Microsoft Outlook using the details provided
        /// in the  <paramref name="task"/> object. The task's name, description, due date, and completion status  are
        /// mapped to the corresponding fields in the Outlook task item. If the task description is null  or empty, a
        /// default watermark is added to the task body.</remarks>
        /// <param name="task">The task to be exported. The task must have a non-null and non-empty name.</param>
        /// <exception cref="ArgumentNullException">Thrown if the <paramref name="task"/> or its <see cref="Task.Name"/> property is null or empty.</exception>
        public static void ExportTask(Task task)
        {
            // Setzen der Parameter für die Aufgabe
            string name = task.Name;
            string? description = task.Description;
            DateOnly? dueDate = task.DueDate;
            bool isCompleted = task.IsCompleted;

            // Erstellen einer neuen Outlookanwendung
            Application outlookApp = new Application();

            // Erstellen eines neuen TaskItems mit den angegebenen Parametern
            TaskItem outlookTask = outlookApp.CreateItem(OlItemType.olTaskItem) as TaskItem;
            outlookTask.Subject = name;
            if (description == null || description == "")
            {
                outlookTask.Body = _watermark;
            }
            else
            {
                outlookTask.Body = description + "\n\n" + _watermark;
            }
            if (dueDate != null)
            {
                outlookTask.DueDate = dueDate.Value.ToDateTime(TimeOnly.MinValue);
            }
            if (isCompleted)
            {
                outlookTask.Status = OlTaskStatus.olTaskComplete;
            }
            else
            {
                outlookTask.Status = OlTaskStatus.olTaskNotStarted;
            }

            // Speichern des TaskItems in Outlook
            outlookTask.Save();
        }

        /// <summary>
        /// Exports a list of tasks to an external system, such as Outlook.
        /// </summary>
        /// <remarks>If the <paramref name="tasks"/> parameter is null or contains no tasks, the method
        /// will return without performing any action. Each task in the list is processed individually and exported to
        /// the external system.</remarks>
        /// <param name="tasks">A list of tasks to be exported. The list must not be null or empty.</param>
        public static void ExportTasks(List<Task> tasks)
        {
            // Überprüfen ob die Liste der Aufgaben leer ist
            if (tasks == null || tasks.Count == 0)
            {
                return;
            }
            // Durchlaufen aller Aufgaben in der Liste
            foreach (Task task in tasks)
            {
                // Exportieren der Aufgabe nach Outlook
                ExportTask(task);
            }
        }

        /// <summary>
        /// Exports all tasks associated with the specified user to Outlook.
        /// </summary>
        /// <remarks>This method performs the following steps: <list type="bullet">
        /// <item><description>Deletes all previously exported tasks from Outlook.</description></item>
        /// <item><description>Retrieves all tasks for the specified user from the database.</description></item>
        /// <item><description>Exports the retrieved tasks to Outlook.</description></item> </list> Ensure that the user
        /// ID provided is valid and corresponds to an existing user in the system.</remarks>
        /// <param name="userId">The unique identifier of the user whose tasks will be exported.</param>
        public static void ExportAllTasks(int userId)
        {
            // Löschen aller exportierten Aufgaben aus Outlook
            DeleteAllExportedTasks();
            // Holen aller Aufgaben des Benutzers aus der Datenbank
            List<Task> tasks = TaskDatabaseHelper.GetAllTasks(userId);
            // Exportieren aller Aufgaben nach Outlook
            ExportTasks(tasks);
        }

        /// <summary>
        /// Imports all tasks from the user's Outlook task folder into the internal database.
        /// </summary>
        /// <remarks>This method retrieves all tasks from the user's default Outlook task folder, filters
        /// them based on a specific watermark,  and imports them into the internal database. Any existing tasks in the
        /// internal database for the specified user are deleted  before the import. Tasks with the watermark in their
        /// body are processed, and their details are converted into the internal  task format. The watermark is removed
        /// from the task description during the import process.  The method assumes that the Outlook application is
        /// installed and accessible on the system where this code is executed.  It also assumes that the user has
        /// access to their Outlook task folder.</remarks>
        /// <param name="userId">The unique identifier of the user for whom the tasks are being imported.</param>
        public static void ImportAllTasks(int userId)
        {
            // Erstellen einer neuen Outlookanwendung
            Application outlookApp = new Application();

            // Zugriff auf den MAPI Namespace und den Tasksordner
            NameSpace outlookNamespace = outlookApp.GetNamespace("MAPI");
            MAPIFolder outlookTasksFolder = outlookNamespace.GetDefaultFolder(OlDefaultFolders.olFolderTasks);
            Items outlookTasks = outlookTasksFolder.Items;

            // Liste zum Speichern der importierten Aufgaben
            List<TaskItem> importedOutlookTasks = new List<TaskItem>();

            // Durchlaufen aller Tasks im Tasksordner
            foreach (object item in outlookTasks)
            {
                if (item is TaskItem task && task.Body != null && task.Body.Contains(_watermark))
                {
                    // Hinzufügen der Aufgabe zur Liste wenn sie das Wasserzeichen nicht enthält
                    importedOutlookTasks.Add(task);
                }
            }

            // Löschen aller Aufgaben aus der internen Datenbank für den Benutzer
            TaskDatabaseHelper.DeleteAllTasks(userId);

            // Umwandeln der Outlook Aufgaben in interne Aufgaben
            foreach (TaskItem importedOutlookTask in importedOutlookTasks)
            {
                // Holen des Erledigt Status der Aufgabe
                bool isCompleted = importedOutlookTask.Status == OlTaskStatus.olTaskComplete;
                // Entfernen des Wasserzeichens aus der Beschreibung
                string? description = importedOutlookTask.Body.Replace(_watermark, "").Trim();
                if (description == "")
                {
                    // Setzen auf null wenn die Beschreibung leer ist
                    description = null;
                }
                // Konvertieren des Fälligkeitsdatums von Outlook in DateOnly
                DateOnly? dueDate = DateOnly.FromDateTime(importedOutlookTask.DueDate);
                if (dueDate == DateOnly.Parse("01.01.4501"))
                {
                    // Setzen auf null wenn das Fälligkeitsdatum nicht gesetzt ist
                    dueDate = null;
                }
                // Hinzufügen der Aufgabe zur internen Datenbank
                TaskDatabaseHelper.AddTask(userId, importedOutlookTask.Subject, isCompleted, description, dueDate);
            }
        }

        /// <summary>
        /// Deletes all exported tasks from the Outlook Tasks folder that contain a specific watermark in their body.
        /// </summary>
        /// <remarks>This method iterates through all tasks in the default Outlook Tasks folder and deletes tasks that 
        /// contain a predefined watermark in their body. Only tasks matching this condition are removed.</remarks>
        public static void DeleteAllExportedTasks()
        {
            // Erstellen einer neuen Outlookanwendung
            Application outlookApp = new Application();

            // Zugriff auf den MAPI Namespace und den Tasksordner
            NameSpace outlookNamespace = outlookApp.GetNamespace("MAPI");
            MAPIFolder tasksFolder = outlookNamespace.GetDefaultFolder(OlDefaultFolders.olFolderTasks);
            Items tasks = tasksFolder.Items;

            // Liste zum Speichern der zu löschenden Aufgaben
            List<TaskItem> tasksToDelete = new List<TaskItem>();

            // Durchlaufen aller Tasks im Tasksordner
            foreach (object item in tasks)
            {
                if (item is TaskItem task && task.Body != null && task.Body.Contains(_watermark))
                {
                    // Hinzufügen der Aufgabe zur Löschliste wenn sie das Wasserzeichen enthält
                    tasksToDelete.Add(task);
                }
            }

            // Löschen aller gesammelten Aufgaben
            foreach (TaskItem task in tasksToDelete)
            {
                task.Delete();
            }
        }
    }
}
